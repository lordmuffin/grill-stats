apiVersion: apps/v1
kind: Deployment
metadata:
  name: temperature-service
  namespace: grill-monitoring
  labels:
    app: temperature-service
    component: microservice
    app.kubernetes.io/name: temperature-service
    app.kubernetes.io/part-of: grill-monitoring
spec:
  replicas: 2
  selector:
    matchLabels:
      app: temperature-service
  template:
    metadata:
      labels:
        app: temperature-service
        component: microservice
    spec:
      containers:
      - name: temperature-service
        image: temperature-service:latest
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: THERMOWORKS_API_KEY
          valueFrom:
            secretKeyRef:
              name: grill-monitoring-secrets
              key: THERMOWORKS_API_KEY
        - name: INFLUXDB_HOST
          valueFrom:
            configMapKeyRef:
              name: grill-monitoring-config
              key: INFLUXDB_HOST
        - name: INFLUXDB_PORT
          valueFrom:
            configMapKeyRef:
              name: grill-monitoring-config
              key: INFLUXDB_PORT
        - name: INFLUXDB_DATABASE
          valueFrom:
            configMapKeyRef:
              name: grill-monitoring-config
              key: INFLUXDB_DATABASE
        - name: INFLUXDB_USERNAME
          valueFrom:
            secretKeyRef:
              name: grill-monitoring-secrets
              key: INFLUXDB_USERNAME
        - name: INFLUXDB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grill-monitoring-secrets
              key: INFLUXDB_PASSWORD
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: grill-monitoring-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: grill-monitoring-config
              key: REDIS_PORT
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grill-monitoring-secrets
              key: REDIS_PASSWORD
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: temp-volume
          mountPath: /tmp
      volumes:
      - name: temp-volume
        emptyDir: {}
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: temperature-service
  namespace: grill-monitoring
  labels:
    app: temperature-service
    component: microservice
spec:
  selector:
    app: temperature-service
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: temperature-service-network-policy
  namespace: grill-monitoring
spec:
  podSelector:
    matchLabels:
      app: temperature-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: grill-monitoring
    - podSelector:
        matchLabels:
          component: api-gateway
    - podSelector:
        matchLabels:
          component: microservice
    ports:
    - protocol: TCP
      port: 8080
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: grill-monitoring
    - podSelector:
        matchLabels:
          component: database
    ports:
    - protocol: TCP
      port: 8086  # InfluxDB
    - protocol: TCP
      port: 6379  # Redis
  - to: []
    ports:
    - protocol: TCP
      port: 443  # HTTPS for ThermoWorks API
    - protocol: TCP
      port: 53   # DNS
    - protocol: UDP
      port: 53   # DNS