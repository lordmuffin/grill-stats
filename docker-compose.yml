version: '3.8'

services:
  # Traefik API Gateway
  traefik:
    image: traefik:v3.0
    command:
      - "--configFile=/etc/traefik/traefik.yml"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./gateway/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./gateway/dynamic.yml:/etc/traefik/dynamic.yml:ro
      - ./gateway/data:/data
      - ./gateway/logs:/var/log/traefik
    environment:
      - ACME_EMAIL=${ACME_EMAIL:-admin@example.com}
      - SSL_HOST=${SSL_HOST:-api.grillstats.local}
      - API_DOMAIN=${API_DOMAIN:-api.grillstats.local}
      - FRONTEND_DOMAIN=${FRONTEND_DOMAIN:-grillstats.local}
      - ADMIN_DOMAIN=${ADMIN_DOMAIN:-admin.grillstats.local}
      - ADMIN_IP_RANGE=${ADMIN_IP_RANGE:-0.0.0.0/0}
      - CLOUDFLARE_EMAIL=${CLOUDFLARE_EMAIL}
      - CLOUDFLARE_API_KEY=${CLOUDFLARE_API_KEY}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`${ADMIN_DOMAIN:-admin.grillstats.local}`)"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dashboard.service=api@internal"
    networks:
      - grill-stats-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "traefik", "healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for device management
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: grill_stats
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d grill_stats"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - grill-stats-network

  # InfluxDB for time-series data
  influxdb:
    image: influxdb:1.8
    environment:
      INFLUXDB_DB: grill_stats
      INFLUXDB_USER: admin
      INFLUXDB_USER_PASSWORD: influx-password
      INFLUXDB_ADMIN_USER: admin
      INFLUXDB_ADMIN_PASSWORD: influx-password
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb
      - ./database-init/influxdb-init.sh:/docker-entrypoint-initdb.d/init.sh
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - grill-stats-network

  # Redis for caching and pub/sub
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./database-backup/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - grill-stats-network

  # Main Grill Stats Service
  grill-stats:
    build: .
    expose:
      - "5000"
    environment:
      # ThermoWorks API
      - THERMOWORKS_API_KEY=${THERMOWORKS_API_KEY}
      - THERMOWORKS_CLIENT_ID=${THERMOWORKS_CLIENT_ID}
      - THERMOWORKS_CLIENT_SECRET=${THERMOWORKS_CLIENT_SECRET}
      - THERMOWORKS_REDIRECT_URI=${THERMOWORKS_REDIRECT_URI:-http://localhost:8080/api/auth/thermoworks/callback}
      - THERMOWORKS_BASE_URL=${THERMOWORKS_BASE_URL:-https://api.thermoworks.com/v1}
      - THERMOWORKS_AUTH_URL=${THERMOWORKS_AUTH_URL:-https://auth.thermoworks.com}

      # Home Assistant
      - HOMEASSISTANT_URL=${HOMEASSISTANT_URL}
      - HOMEASSISTANT_TOKEN=${HOMEASSISTANT_TOKEN}

      # Database
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=grill_stats
      - DB_USER=postgres
      - DB_PASSWORD=postgres

      # Redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379

      # InfluxDB
      - INFLUXDB_HOST=influxdb
      - INFLUXDB_PORT=8086
      - INFLUXDB_DATABASE=grill_stats
      - INFLUXDB_USERNAME=admin
      - INFLUXDB_PASSWORD=influx-password

      # Application
      - SECRET_KEY=${SECRET_KEY:-default-dev-secret-key}
      - JWT_SECRET=${JWT_SECRET:-default-dev-jwt-secret}
      - LOG_LEVEL=INFO
      - FLASK_ENV=${FLASK_ENV:-development}
      - DEBUG=${DEBUG:-true}
      - PYTHONUNBUFFERED=1

      # Security
      - JWT_SECRET=${JWT_SECRET:-default-dev-jwt-secret}
      - WAF_ENABLED=${WAF_ENABLED:-true}
      - RATE_LIMIT_ENABLED=${RATE_LIMIT_ENABLED:-true}
      - SECURITY_HEADERS_ENABLED=${SECURITY_HEADERS_ENABLED:-true}
    volumes:
      - ./:/app
      - /app/venv
      - /app/__pycache__
      - /app/.git
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      influxdb:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    networks:
      - grill-stats-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grill-stats.rule=Host(`${API_DOMAIN:-api.grillstats.local}`)"
      - "traefik.http.routers.grill-stats.tls.certresolver=letsencrypt"
      - "traefik.http.services.grill-stats.loadbalancer.server.port=5000"
      - "traefik.http.routers.grill-stats.middlewares=security-headers@file,api-rate-limit@file,compression@file"

  # Microservices (optional components, can be enabled/disabled as needed)

  # Auth Service (Standalone JWT verification service)
  auth-service:
    build:
      context: ./auth
      dockerfile: Dockerfile
    expose:
      - "8082"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET:-default-dev-jwt-secret}
      - SECRET_KEY=${SECRET_KEY:-default-dev-secret-key}
      - AUTH_SERVICE_PORT=8082
    depends_on:
      redis:
        condition: service_healthy
    profiles:
      - gateway
    networks:
      - grill-stats-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth-service.rule=Host(`${API_DOMAIN:-api.grillstats.local}`) && PathPrefix(`/auth/verify`)"
      - "traefik.http.routers.auth-service.tls.certresolver=letsencrypt"
      - "traefik.http.services.auth-service.loadbalancer.server.port=8082"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/api/auth/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Device Service
  device-service:
    build:
      context: ./services/device-service
      dockerfile: Dockerfile
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=grill_stats
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET:-default-dev-jwt-secret}
      - THERMOWORKS_CLIENT_ID=${THERMOWORKS_CLIENT_ID}
      - THERMOWORKS_CLIENT_SECRET=${THERMOWORKS_CLIENT_SECRET}
      - THERMOWORKS_REDIRECT_URI=${THERMOWORKS_REDIRECT_URI:-http://localhost:8080/api/auth/thermoworks/callback}
      - THERMOWORKS_BASE_URL=${THERMOWORKS_BASE_URL:-https://api.thermoworks.com/v1}
      - THERMOWORKS_AUTH_URL=${THERMOWORKS_AUTH_URL:-https://auth.thermoworks.com}
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    profiles:
      - microservices
    networks:
      - grill-stats-network

  # Temperature Service
  temperature-service:
    build:
      context: ./services/temperature-service
      dockerfile: Dockerfile
    environment:
      - INFLUXDB_HOST=influxdb
      - INFLUXDB_PORT=8086
      - INFLUXDB_DATABASE=grill_stats
      - INFLUXDB_USERNAME=admin
      - INFLUXDB_PASSWORD=influx-password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - THERMOWORKS_API_KEY=${THERMOWORKS_API_KEY}
    ports:
      - "8081:8080"
    depends_on:
      influxdb:
        condition: service_healthy
      redis:
        condition: service_healthy
    profiles:
      - microservices
    networks:
      - grill-stats-network

  # Web UI
  web-ui:
    build:
      context: ./services/web-ui
      dockerfile: Dockerfile
    environment:
      - REACT_APP_AUTH_SERVICE_URL=http://localhost:8082
      - REACT_APP_DEVICE_SERVICE_URL=http://localhost:8080
      - REACT_APP_TEMPERATURE_SERVICE_URL=http://localhost:8081
    ports:
      - "3000:3000"
    depends_on:
      - auth-service
      - device-service
    profiles:
      - microservices
    networks:
      - grill-stats-network

  # Database Backup Service
  db-backup:
    image: postgres:15-alpine
    volumes:
      - ./database-backup:/scripts
      - backups_volume:/backups
    environment:
      - POSTGRES_PASSWORD=postgres
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=grill_stats
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - INFLUXDB_HOST=influxdb
      - INFLUXDB_PORT=8086
      - INFLUXDB_DATABASE=grill_stats
      - INFLUXDB_USERNAME=admin
      - INFLUXDB_PASSWORD=influx-password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ENVIRONMENT=development
    entrypoint: ["sh", "-c"]
    command: >
      "
      mkdir -p /backups/postgres /backups/influxdb /backups/redis &&
      echo 'Database backup service started. Ready to run backup scripts.' &&
      echo 'Run backup scripts manually for testing:' &&
      echo '- docker-compose exec db-backup /scripts/postgres-backup.sh' &&
      echo '- docker-compose exec db-backup /scripts/influxdb-backup.sh' &&
      echo '- docker-compose exec db-backup /scripts/redis-backup.sh' &&
      tail -f /dev/null
      "
    depends_on:
      postgres:
        condition: service_healthy
      influxdb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - grill-stats-network

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:v2.47.0
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    profiles:
      - monitoring
    networks:
      - grill-stats-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`${ADMIN_DOMAIN:-admin.grillstats.local}`) && PathPrefix(`/prometheus`)"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  grafana:
    image: grafana/grafana:10.1.0
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    profiles:
      - monitoring
    networks:
      - grill-stats-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`${ADMIN_DOMAIN:-admin.grillstats.local}`) && PathPrefix(`/grafana`)"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  alertmanager:
    image: prom/alertmanager:v0.26.0
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    profiles:
      - monitoring
    networks:
      - grill-stats-network

volumes:
  postgres_data:
  influxdb_data:
  redis_data:
  backups_volume:
  prometheus_data:
  grafana_data:
  alertmanager_data:

networks:
  grill-stats-network:
    driver: bridge
