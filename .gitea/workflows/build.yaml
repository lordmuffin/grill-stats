name: Build and Test Grill Stats
# Pipeline bump: 2025-07-19T14:30:00Z - Updated pipeline with comprehensive testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install System Dependencies
        run: |
          # Install system dependencies including PostgreSQL development packages
          sudo apt-get update
          sudo apt-get install -y postgresql-client libpq-dev

      - name: Install Python Dependencies
        run: |
          # Install packages
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
          # Install dev dependencies for linting
          pip install flake8 black isort mypy

      - name: Run Syntax Checks
        run: |
          # Critical errors - fail the build if these occur
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run Code Style Checks
        run: |
          # Style checks - report but don't fail the build
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          black --check --diff .
          isort --check --diff .

      - name: Run Type Checking
        run: |
          # Type checking - exit-zero for now as we implement gradually
          mypy --install-types --non-interactive --ignore-missing-imports app.py thermoworks_client.py homeassistant_client.py || echo "Type checking completed with issues"

      - name: Run Unit Tests
        run: |
          # Run pytest on the unit tests
          python -m pytest tests/unit -v

      - name: Run Alert System Tests
        run: |
          # Run the alert system tests
          python test_alert_system.py

  build:
    runs-on: ubuntu-latest
    needs: test
    env:
      DOCKER_REGISTRY: docker.io
      IMAGE_NAME: lordmuffin/grill-stats
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install System Dependencies
        run: |
          # Install system dependencies including PostgreSQL development packages
          sudo apt-get update
          sudo apt-get install -y postgresql-client libpq-dev

      - name: Install Python Dependencies
        run: |
          # Install packages
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "No requirements.txt found"
          fi

      - name: Run Vulnerability Scanning
        run: |
          # Install safety for Python package vulnerability scanning
          pip install safety
          safety check -r requirements.txt || echo "Vulnerability check completed with findings"

      - name: Setup Kaniko
        run: |
          # Return to Kaniko but with different approach
          echo "Setting up Kaniko executor..."

          # Download Kaniko executor
          curl -L https://github.com/google/go-containerregistry/releases/latest/download/go-containerregistry_Linux_x86_64.tar.gz | tar -xzf - -C /tmp/ crane
          /tmp/crane export gcr.io/kaniko-project/executor:v1.23.2 - | tar -xf - -C /tmp/ kaniko/executor
          cp /tmp/kaniko/executor /tmp/executor
          chmod +x /tmp/executor

          # Test Docker Hub connectivity
          echo "Testing Docker Hub connectivity..."
          curl -s https://index.docker.io/v1/ || echo "Docker Hub connectivity test completed"

      - name: Build and Push with Kaniko to Local, then Crane
        run: |
          # Generate semantic version tags
          VERSION=$(cat VERSION)
          SHORT_SHA=$(git rev-parse --short HEAD)
          BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          # Determine version tags based on branch and context
          if [ "$BRANCH_NAME" = "main" ]; then
            # Main branch: use semantic version + latest
            MAIN_TAG="$VERSION"
            LATEST_TAG="latest"
            echo "Building PRODUCTION release: v$VERSION"
          elif [ "$BRANCH_NAME" = "develop" ]; then
            # Develop branch: use version + dev suffix
            MAIN_TAG="$VERSION-dev"
            LATEST_TAG="dev"
            echo "Building DEVELOPMENT release: v$VERSION-dev"
          else
            # Feature/other branches: use version + branch + sha
            SAFE_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9._-]/-/g')
            MAIN_TAG="$VERSION-$SAFE_BRANCH-$SHORT_SHA"
            LATEST_TAG="$SAFE_BRANCH"
            echo "Building FEATURE branch release: v$VERSION-$SAFE_BRANCH-$SHORT_SHA"
          fi

          # Debug: Check environment
          echo "Registry: ${{ env.DOCKER_REGISTRY }}"
          echo "Base Image: ${{ env.IMAGE_NAME }}"
          echo "Version: $VERSION"
          echo "Branch: $BRANCH_NAME"
          echo "Short SHA: $SHORT_SHA"
          echo "Build Date: $BUILD_DATE"
          echo "Main Tag: $MAIN_TAG"
          echo "Latest Tag: $LATEST_TAG"

          # Build with Kaniko to local tar file (no registry push)
          echo "Building container image to local tar..."

          # Create tar context
          tar -czf /tmp/context.tar.gz --exclude='.git' --exclude='.gitea' .

          # Run Kaniko to build and export to tar (no push)
          /tmp/executor \
            --context=tar:///tmp/context.tar.gz \
            --tarPath=/tmp/image.tar \
            --no-push \
            --custom-platform=linux/amd64 \
            --single-snapshot

          # Use crane to push the tar to registry with explicit auth
          echo "Pushing with crane..."

          # Create Docker config for crane
          mkdir -p ~/.docker
          echo "Setting up Docker Hub authentication..."

          # Use Docker Hub credentials (hardcoded for testing, will use secrets later)
          AUTH_STRING="bG9yZG11ZmZpbjpkY2tyX3BhdF9nSWJScjBsRnZ6LTlxMFFZVDVKc01FQ0p5VDQ="
          echo "Docker Hub auth configured with valid credentials"

          cat > ~/.docker/config.json << EOF
          {
            "auths": {
              "https://index.docker.io/v1/": {
                "auth": "${AUTH_STRING}"
              }
            }
          }
          EOF

          # Test the tar file first
          echo "Testing tar file:"
          ls -la /tmp/image.tar

          # Push to Docker Hub with crane
          echo "Attempting push to Docker Hub with crane..."
          echo "Target image: ${{ env.IMAGE_NAME }}:latest"
          echo "Testing crane version..."
          /tmp/crane version || echo "Crane version check failed"
          echo "Docker config contents:"
          cat ~/.docker/config.json

          echo "Pushing to Docker Hub with semantic versioning..."

          # Push main semantic version tag
          echo "Pushing main tag: ${{ env.IMAGE_NAME }}:$MAIN_TAG"
          if /tmp/crane push /tmp/image.tar ${{ env.IMAGE_NAME }}:$MAIN_TAG \
            --platform=linux/amd64; then
            echo "✅ Main tag push succeeded: $MAIN_TAG"
          else
            echo "❌ Main tag push failed: $MAIN_TAG"
            exit 1
          fi

          # Push latest/dev/branch tag
          echo "Pushing latest tag: ${{ env.IMAGE_NAME }}:$LATEST_TAG"
          if /tmp/crane push /tmp/image.tar ${{ env.IMAGE_NAME }}:$LATEST_TAG \
            --platform=linux/amd64; then
            echo "✅ Latest tag push succeeded: $LATEST_TAG"
          else
            echo "❌ Latest tag push failed: $LATEST_TAG"
            exit 1
          fi

          # For main branch, also push with 'v' prefix (e.g., v1.0.0)
          if [ "$BRANCH_NAME" = "main" ]; then
            echo "Pushing version tag: ${{ env.IMAGE_NAME }}:v$VERSION"
            if /tmp/crane push /tmp/image.tar ${{ env.IMAGE_NAME }}:v$VERSION \
              --platform=linux/amd64; then
              echo "✅ Version tag push succeeded: v$VERSION"
            else
              echo "❌ Version tag push failed: v$VERSION"
              exit 1
            fi
          fi

          echo "🎉 All tags pushed successfully to Docker Hub!"
          echo "📦 Available tags:"
          echo "   - ${{ env.IMAGE_NAME }}:$MAIN_TAG"
          echo "   - ${{ env.IMAGE_NAME }}:$LATEST_TAG"
          if [ "$BRANCH_NAME" = "main" ]; then
            echo "   - ${{ env.IMAGE_NAME }}:v$VERSION"
          fi

      - name: Scan Docker Image for Vulnerabilities
        run: |
          # Install trivy scanner
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

          # Scan the built image
          trivy image --input /tmp/image.tar || echo "Image vulnerability scan completed with findings"

      - name: Verify Container Startup
        run: |
          # Load the image into local Docker
          podman load -i /tmp/image.tar

          # Run the container and verify it starts correctly
          CONTAINER_ID=$(podman run -d --name grill-stats-test -e MOCK_MODE=true -e SECRET_KEY=test ${{ env.IMAGE_NAME }}:$LATEST_TAG)

          # Wait for container to start
          sleep 10

          # Check container status
          if podman inspect $CONTAINER_ID --format '{{.State.Status}}' | grep -q "running"; then
            echo "✅ Container started successfully"
          else
            echo "❌ Container failed to start"
            podman logs $CONTAINER_ID
            exit 1
          fi

          # Clean up
          podman stop $CONTAINER_ID
          podman rm $CONTAINER_ID
