apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: grill-stats
spec:
  replicas: 1
  template:
    spec:
      containers:
      - name: redis
        resources:
          requests:
            cpu: 200m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 2Gi
        env:
        - name: REDIS_ENV
          value: "production"
      # Add node affinity for production
      nodeSelector:
        node-role.kubernetes.io/worker: "true"
      tolerations:
      - key: "node-role.kubernetes.io/worker"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 20Gi  # Larger storage for prod
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: grill-stats
data:
  redis.conf: |
    # Production Redis Configuration
    bind 0.0.0.0
    port 6379
    protected-mode yes
    requirepass ${REDIS_PASSWORD}
    
    # Persistence - aggressive for production
    save 900 1
    save 300 10
    save 60 10000
    
    # Memory management - production limits
    maxmemory 1536mb
    maxmemory-policy allkeys-lru
    
    # Logging - production level
    loglevel notice
    logfile ""
    
    # Connection handling
    timeout 300
    tcp-keepalive 300
    tcp-backlog 511
    
    # Database configuration
    databases 16
    
    # Keyspace notifications
    notify-keyspace-events "Ex"
    
    # RDB persistence
    rdbcompression yes
    rdbchecksum yes
    dbfilename dump.rdb
    dir /data
    
    # AOF persistence - enabled for production durability
    appendonly yes
    appendfilename "appendonly.aof"
    appendfsync everysec
    no-appendfsync-on-rewrite no
    auto-aof-rewrite-percentage 100
    auto-aof-rewrite-min-size 64mb
    
    # Performance tuning - production optimized
    stop-writes-on-bgsave-error yes
    rdbcompression yes
    lazyfree-lazy-eviction yes
    lazyfree-lazy-expire yes
    lazyfree-lazy-server-del yes
    
    # Client buffer limits - production settings
    client-output-buffer-limit normal 0 0 0
    client-output-buffer-limit replica 256mb 64mb 60
    client-output-buffer-limit pubsub 32mb 8mb 60
    
    # Slow log - production threshold
    slowlog-log-slower-than 10000
    slowlog-max-len 128
    
    # Production-optimized data structure settings
    hash-max-ziplist-entries 512
    hash-max-ziplist-value 64
    set-max-intset-entries 512
    zset-max-ziplist-entries 128
    zset-max-ziplist-value 64
    list-max-ziplist-size -2
    list-compress-depth 0
    
    # HyperLogLog settings
    hll-sparse-max-bytes 3000
    
    # Streams settings
    stream-node-max-bytes 4096
    stream-node-max-entries 100
    
    # Active rehashing
    activerehashing yes
    
    # Jemalloc background thread
    jemalloc-bg-thread yes
    
    # Lua script timeout
    lua-time-limit 5000
    
    # Production security settings
    rename-command FLUSHDB "FLUSHDB_DANGEROUS"
    rename-command FLUSHALL "FLUSHALL_DANGEROUS"
    rename-command CONFIG "CONFIG_ADMIN"
    rename-command SHUTDOWN "SHUTDOWN_ADMIN"
    rename-command DEBUG "DEBUG_ADMIN"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-cache-config
  namespace: grill-stats
data:
  cache-config.json: |
    {
      "session_management": {
        "ttl": 3600,
        "key_prefix": "session:",
        "database": 0,
        "description": "JWT tokens and user sessions"
      },
      "live_temperature_data": {
        "ttl": 30,
        "key_prefix": "temp:",
        "database": 1,
        "description": "Real-time temperature readings for dashboard"
      },
      "device_status": {
        "ttl": 60,
        "key_prefix": "device:",
        "database": 2,
        "description": "Device connection and status information"
      },
      "api_responses": {
        "ttl": 300,
        "key_prefix": "api:",
        "database": 3,
        "description": "Cached API responses for performance"
      },
      "thermoworks_api": {
        "ttl": 600,
        "key_prefix": "tw:",
        "database": 4,
        "description": "ThermoWorks API responses and rate limiting"
      },
      "rate_limiting": {
        "ttl": 3600,
        "key_prefix": "rate:",
        "database": 5,
        "description": "Rate limiting counters and failed attempts"
      },
      "sse_connections": {
        "ttl": 1800,
        "key_prefix": "sse:",
        "database": 6,
        "description": "Server-Sent Events connection tracking"
      },
      "aggregated_data": {
        "ttl": 900,
        "key_prefix": "agg:",
        "database": 7,
        "description": "Pre-computed aggregated temperature data"
      }
    }
---
# Enable Sentinel for production high availability
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-sentinel
  namespace: grill-stats
spec:
  replicas: 3  # Enable Sentinel in production
  template:
    spec:
      containers:
      - name: redis-sentinel
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
      # Add node affinity for production
      nodeSelector:
        node-role.kubernetes.io/worker: "true"
      tolerations:
      - key: "node-role.kubernetes.io/worker"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
---
# Production backup configuration
apiVersion: batch/v1
kind: CronJob
metadata:
  name: redis-backup
  namespace: grill-stats
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: redis-backup
            resources:
              requests:
                cpu: 200m
                memory: 256Mi
              limits:
                cpu: 500m
                memory: 512Mi
---
# Production backup storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-backup-pvc
  namespace: grill-stats
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi  # Larger backup storage for production
---
# Production Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: redis-pdb
  namespace: grill-stats
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
---
# Production monitoring enhancements
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-exporter
  namespace: grill-stats
spec:
  replicas: 1
  template:
    spec:
      containers:
      - name: redis-exporter
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
        env:
        - name: REDIS_EXPORTER_CHECK_KEYS
          value: "session:*,temp:*,device:*,api:*,tw:*,rate:*,sse:*,agg:*"
        - name: REDIS_EXPORTER_CHECK_SINGLE_KEYS
          value: "session:active_count,temp:latest,device:count,api:health"
        - name: REDIS_EXPORTER_EXPORT_CLIENT_LIST
          value: "true"
        - name: REDIS_EXPORTER_INCL_SYSTEM_METRICS
          value: "true"
      # Add node affinity for production
      nodeSelector:
        node-role.kubernetes.io/worker: "true"
      tolerations:
      - key: "node-role.kubernetes.io/worker"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"