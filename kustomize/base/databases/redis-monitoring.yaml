apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-exporter
  namespace: grill-stats
  labels:
    app.kubernetes.io/name: redis-exporter
    app.kubernetes.io/part-of: grill-stats
    app.kubernetes.io/component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis-exporter
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis-exporter
        app.kubernetes.io/part-of: grill-stats
        app.kubernetes.io/component: monitoring
    spec:
      securityContext:
        fsGroup: 59000
        runAsUser: 59000
        runAsNonRoot: true
      containers:
      - name: redis-exporter
        image: oliver006/redis_exporter:v1.55.0
        ports:
        - containerPort: 9121
          name: metrics
        env:
        - name: REDIS_ADDR
          value: "redis://redis:6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grill-stats-secrets
              key: REDIS_PASSWORD
        - name: REDIS_EXPORTER_INCL_SYSTEM_METRICS
          value: "true"
        - name: REDIS_EXPORTER_INCLUDE_SYSTEM_METRICS
          value: "true"
        - name: REDIS_EXPORTER_IS_TILE38
          value: "false"
        - name: REDIS_EXPORTER_PING_ON_CONNECT
          value: "true"
        - name: REDIS_EXPORTER_EXPORT_CLIENT_LIST
          value: "true"
        - name: REDIS_EXPORTER_CHECK_KEYS
          value: "session:*,temp:*,device:*,api:*,tw:*,rate:*,sse:*,agg:*"
        - name: REDIS_EXPORTER_CHECK_SINGLE_KEYS
          value: "session:active_count,temp:latest,device:count"
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 100m
            memory: 128Mi
        readinessProbe:
          httpGet:
            path: /metrics
            port: metrics
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /metrics
            port: metrics
          initialDelaySeconds: 15
          periodSeconds: 20
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
---
apiVersion: v1
kind: Service
metadata:
  name: redis-exporter
  namespace: grill-stats
  labels:
    app.kubernetes.io/name: redis-exporter
    app.kubernetes.io/part-of: grill-stats
    app.kubernetes.io/component: monitoring
spec:
  selector:
    app.kubernetes.io/name: redis-exporter
  ports:
  - port: 9121
    targetPort: metrics
    name: metrics
  type: ClusterIP
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: redis-metrics
  namespace: grill-stats
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/part-of: grill-stats
    app.kubernetes.io/component: monitoring
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: redis-exporter
  endpoints:
  - port: metrics
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s
    honorLabels: true
---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: redis-alerts
  namespace: grill-stats
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/part-of: grill-stats
    app.kubernetes.io/component: monitoring
spec:
  groups:
  - name: redis.rules
    rules:
    - alert: RedisDown
      expr: redis_up == 0
      for: 2m
      labels:
        severity: critical
      annotations:
        summary: "Redis instance is down"
        description: "Redis instance {{ $labels.instance }} is down for more than 2 minutes."
    
    - alert: RedisHighMemoryUsage
      expr: (redis_memory_used_bytes / redis_memory_max_bytes) * 100 > 90
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "Redis memory usage is high"
        description: "Redis instance {{ $labels.instance }} memory usage is {{ $value }}% for more than 5 minutes."
    
    - alert: RedisHighConnections
      expr: redis_connected_clients > 100
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "Redis has too many connections"
        description: "Redis instance {{ $labels.instance }} has {{ $value }} connections for more than 5 minutes."
    
    - alert: RedisSlowQueries
      expr: increase(redis_slowlog_length[5m]) > 10
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "Redis slow queries detected"
        description: "Redis instance {{ $labels.instance }} has {{ $value }} slow queries in the last 5 minutes."
    
    - alert: RedisReplicationLag
      expr: redis_master_repl_offset - redis_slave_repl_offset > 1000
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "Redis replication lag is high"
        description: "Redis slave {{ $labels.instance }} is lagging behind master by {{ $value }} bytes."
    
    - alert: RedisKeyspaceHitRatio
      expr: (redis_keyspace_hits_total / (redis_keyspace_hits_total + redis_keyspace_misses_total)) * 100 < 80
      for: 10m
      labels:
        severity: warning
      annotations:
        summary: "Redis keyspace hit ratio is low"
        description: "Redis instance {{ $labels.instance }} keyspace hit ratio is {{ $value }}% for more than 10 minutes."
    
    - alert: RedisSessionCacheHigh
      expr: redis_db_keys{db="db0"} > 10000
      for: 5m
      labels:
        severity: info
      annotations:
        summary: "High number of session keys in Redis"
        description: "Redis session database (db0) has {{ $value }} keys, which indicates high user activity."
    
    - alert: RedisTempDataStale
      expr: time() - redis_key_timestamp{key_name="temp:latest"} > 300
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "Temperature data is stale"
        description: "Latest temperature data in Redis is older than 5 minutes."
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-dashboard-config
  namespace: grill-stats
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/part-of: grill-stats
    app.kubernetes.io/component: monitoring
data:
  dashboard.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Redis Metrics - Grill Stats",
        "tags": ["redis", "cache", "grill-stats"],
        "style": "dark",
        "timezone": "browser",
        "panels": [
          {
            "title": "Redis Uptime",
            "type": "stat",
            "targets": [
              {
                "expr": "redis_uptime_in_seconds",
                "legendFormat": "Uptime"
              }
            ]
          },
          {
            "title": "Memory Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "redis_memory_used_bytes",
                "legendFormat": "Used Memory"
              },
              {
                "expr": "redis_memory_max_bytes",
                "legendFormat": "Max Memory"
              }
            ]
          },
          {
            "title": "Connected Clients",
            "type": "graph",
            "targets": [
              {
                "expr": "redis_connected_clients",
                "legendFormat": "Connected Clients"
              }
            ]
          },
          {
            "title": "Commands per Second",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(redis_commands_processed_total[5m])",
                "legendFormat": "Commands/sec"
              }
            ]
          },
          {
            "title": "Keyspace Hit Ratio",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(redis_keyspace_hits_total[5m]) / (rate(redis_keyspace_hits_total[5m]) + rate(redis_keyspace_misses_total[5m])) * 100",
                "legendFormat": "Hit Ratio %"
              }
            ]
          },
          {
            "title": "Database Keys by Use Case",
            "type": "graph",
            "targets": [
              {
                "expr": "redis_db_keys{db=\"db0\"}",
                "legendFormat": "Sessions (db0)"
              },
              {
                "expr": "redis_db_keys{db=\"db1\"}",
                "legendFormat": "Temperature Data (db1)"
              },
              {
                "expr": "redis_db_keys{db=\"db2\"}",
                "legendFormat": "Device Status (db2)"
              },
              {
                "expr": "redis_db_keys{db=\"db3\"}",
                "legendFormat": "API Responses (db3)"
              }
            ]
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "30s"
      }
    }