apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: backup-monitoring
  namespace: grill-stats
  labels:
    app.kubernetes.io/name: backup-monitoring
    app.kubernetes.io/component: backup
    app.kubernetes.io/part-of: grill-stats
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: backup
  endpoints:
  - port: http
    interval: 30s
    path: /metrics
    honorLabels: true

---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: backup-alerts
  namespace: grill-stats
  labels:
    app.kubernetes.io/name: backup-alerts
    app.kubernetes.io/component: backup
    app.kubernetes.io/part-of: grill-stats
spec:
  groups:
  - name: backup.rules
    rules:
    - alert: BackupJobFailed
      expr: |
        increase(kube_job_failed_total{job_name=~".*backup.*", namespace="grill-stats"}[1h]) > 0
      for: 5m
      labels:
        severity: critical
        component: backup
      annotations:
        summary: "Backup job failed"
        description: "Backup job {{ $labels.job_name }} has failed in namespace {{ $labels.namespace }}"
        runbook_url: "https://runbooks.example.com/backup-job-failed"

    - alert: BackupJobNotRunning
      expr: |
        (time() - kube_job_status_start_time{job_name=~".*backup.*", namespace="grill-stats"}) > 86400
      for: 1h
      labels:
        severity: warning
        component: backup
      annotations:
        summary: "Backup job hasn't run in 24 hours"
        description: "Backup job {{ $labels.job_name }} hasn't run in the last 24 hours"
        runbook_url: "https://runbooks.example.com/backup-job-not-running"

    - alert: BackupStorageFull
      expr: |
        (1 - (node_filesystem_avail_bytes{mountpoint="/backup"} / node_filesystem_size_bytes{mountpoint="/backup"})) * 100 > 90
      for: 15m
      labels:
        severity: critical
        component: backup
      annotations:
        summary: "Backup storage is nearly full"
        description: "Backup storage usage is at {{ $value }}% on {{ $labels.instance }}"
        runbook_url: "https://runbooks.example.com/backup-storage-full"

    - alert: BackupStorageWarning
      expr: |
        (1 - (node_filesystem_avail_bytes{mountpoint="/backup"} / node_filesystem_size_bytes{mountpoint="/backup"})) * 100 > 80
      for: 30m
      labels:
        severity: warning
        component: backup
      annotations:
        summary: "Backup storage usage is high"
        description: "Backup storage usage is at {{ $value }}% on {{ $labels.instance }}"
        runbook_url: "https://runbooks.example.com/backup-storage-warning"

    - alert: BackupVerificationFailed
      expr: |
        increase(kube_job_failed_total{job_name="backup-verification", namespace="grill-stats"}[1h]) > 0
      for: 5m
      labels:
        severity: critical
        component: backup
      annotations:
        summary: "Backup verification failed"
        description: "Backup verification job has failed"
        runbook_url: "https://runbooks.example.com/backup-verification-failed"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: backup-monitoring-dashboard
  namespace: grill-stats
  labels:
    app.kubernetes.io/name: backup-monitoring-dashboard
    app.kubernetes.io/component: backup
    app.kubernetes.io/part-of: grill-stats
    grafana_dashboard: "true"
data:
  backup-monitoring.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Grill Stats Backup Monitoring",
        "description": "Monitoring dashboard for backup operations",
        "tags": ["backup", "grill-stats"],
        "timezone": "UTC",
        "refresh": "5m",
        "time": {
          "from": "now-24h",
          "to": "now"
        },
        "panels": [
          {
            "id": 1,
            "title": "Backup Job Status",
            "type": "stat",
            "targets": [
              {
                "expr": "kube_job_status_succeeded{job_name=~\".*backup.*\", namespace=\"grill-stats\"}",
                "legendFormat": "{{ job_name }}"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "mappings": [
                  {
                    "type": "value",
                    "value": "0",
                    "text": "Failed"
                  },
                  {
                    "type": "value",
                    "value": "1",
                    "text": "Success"
                  }
                ],
                "color": {
                  "mode": "thresholds"
                },
                "thresholds": {
                  "steps": [
                    {
                      "color": "red",
                      "value": null
                    },
                    {
                      "color": "green",
                      "value": 1
                    }
                  ]
                }
              }
            },
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 0,
              "y": 0
            }
          },
          {
            "id": 2,
            "title": "Backup Storage Usage",
            "type": "gauge",
            "targets": [
              {
                "expr": "(1 - (node_filesystem_avail_bytes{mountpoint=\"/backup\"} / node_filesystem_size_bytes{mountpoint=\"/backup\"})) * 100",
                "legendFormat": "Storage Usage %"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "unit": "percent",
                "min": 0,
                "max": 100,
                "thresholds": {
                  "steps": [
                    {
                      "color": "green",
                      "value": null
                    },
                    {
                      "color": "yellow",
                      "value": 70
                    },
                    {
                      "color": "red",
                      "value": 90
                    }
                  ]
                }
              }
            },
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 12,
              "y": 0
            }
          },
          {
            "id": 3,
            "title": "Backup Job Duration",
            "type": "graph",
            "targets": [
              {
                "expr": "kube_job_status_completion_time{job_name=~\".*backup.*\", namespace=\"grill-stats\"} - kube_job_status_start_time{job_name=~\".*backup.*\", namespace=\"grill-stats\"}",
                "legendFormat": "{{ job_name }}"
              }
            ],
            "yAxes": [
              {
                "label": "Duration (seconds)",
                "min": 0
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 24,
              "x": 0,
              "y": 8
            }
          },
          {
            "id": 4,
            "title": "Recent Backup Jobs",
            "type": "table",
            "targets": [
              {
                "expr": "kube_job_info{job_name=~\".*backup.*\", namespace=\"grill-stats\"}",
                "format": "table",
                "instant": true
              }
            ],
            "transformations": [
              {
                "id": "organize",
                "options": {
                  "excludeByName": {
                    "__name__": true,
                    "Time": true,
                    "endpoint": true,
                    "instance": true,
                    "service": true
                  }
                }
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 24,
              "x": 0,
              "y": 16
            }
          }
        ]
      }
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: backup-runbook
  namespace: grill-stats
  labels:
    app.kubernetes.io/name: backup-runbook
    app.kubernetes.io/component: backup
    app.kubernetes.io/part-of: grill-stats
data:
  runbook.md: |
    # Grill Stats Backup Runbook

    ## Overview

    This runbook provides procedures for managing backups and disaster recovery for the Grill Stats platform.

    ## Backup Schedule

    - **PostgreSQL**: Daily at 2:00 AM UTC
    - **InfluxDB**: Daily at 3:00 AM UTC
    - **Redis**: Daily at 4:00 AM UTC
    - **Verification**: Daily at 6:00 AM UTC

    ## Recovery Time Objectives (RTO)

    - **PostgreSQL**: 1 hour
    - **InfluxDB**: 2 hours
    - **Redis**: 30 minutes
    - **Full Platform**: 4 hours

    ## Recovery Point Objectives (RPO)

    - **PostgreSQL**: 24 hours (daily backup)
    - **InfluxDB**: 24 hours (daily backup)
    - **Redis**: 24 hours (acceptable data loss for cache)

    ## Common Procedures

    ### 1. Check Backup Status

    ```bash
    # Check recent backup jobs
    kubectl get jobs -n grill-stats -l app.kubernetes.io/component=backup

    # Check backup verification results
    kubectl logs -n grill-stats -l app.kubernetes.io/name=backup-verification

    # Check backup storage usage
    kubectl exec -n grill-stats deployment/monitoring -- df -h /backup
    ```

    ### 2. Manual Backup

    ```bash
    # Create manual PostgreSQL backup
    kubectl create job --from=cronjob/postgresql-backup manual-pg-backup-$(date +%Y%m%d-%H%M%S) -n grill-stats

    # Create manual InfluxDB backup
    kubectl create job --from=cronjob/influxdb-backup manual-influx-backup-$(date +%Y%m%d-%H%M%S) -n grill-stats

    # Create manual Redis backup
    kubectl create job --from=cronjob/redis-backup manual-redis-backup-$(date +%Y%m%d-%H%M%S) -n grill-stats
    ```

    ### 3. Test Restore

    ```bash
    # Start restore job pod
    kubectl apply -f backup-restore-job.yaml

    # Test PostgreSQL restore
    kubectl exec -it backup-restore-job -- /scripts/postgresql-restore.sh --test --dry-run /backup/postgresql/latest_backup.tar.gz.enc

    # Test InfluxDB restore
    kubectl exec -it backup-restore-job -- /scripts/influxdb-restore.sh --test --dry-run /backup/influxdb/latest_backup.tar.gz.enc

    # Test Redis restore
    kubectl exec -it backup-restore-job -- /scripts/redis-restore.sh --test --dry-run /backup/redis/latest_backup.tar.gz.enc
    ```

    ### 4. Emergency Restore

    ```bash
    # Full platform restore (DANGEROUS - USE WITH CAUTION)
    kubectl exec -it backup-restore-job -- /scripts/full-restore.sh --dry-run

    # If dry run looks good, run actual restore
    kubectl exec -it backup-restore-job -- /scripts/full-restore.sh --force
    ```

    ### 5. Backup Troubleshooting

    ```bash
    # Check backup job logs
    kubectl logs -n grill-stats job/postgresql-backup
    kubectl logs -n grill-stats job/influxdb-backup
    kubectl logs -n grill-stats job/redis-backup

    # Check backup storage
    kubectl exec -n grill-stats -it backup-restore-job -- ls -la /backup/

    # Check backup file integrity
    kubectl exec -n grill-stats -it backup-restore-job -- /scripts/verify-backups.sh
    ```

    ## Alert Response

    ### BackupJobFailed

    1. Check job logs for error details
    2. Verify database connectivity
    3. Check storage availability
    4. Retry backup if issue resolved
    5. Escalate if persistent failures

    ### BackupStorageFull

    1. Check backup retention settings
    2. Clean up old backups manually if needed
    3. Consider increasing storage allocation
    4. Verify backup rotation is working

    ### BackupVerificationFailed

    1. Check verification job logs
    2. Verify backup file integrity
    3. Test backup restoration
    4. Investigate backup process issues

    ## Emergency Contacts

    - **Primary**: DevOps Team
    - **Secondary**: Platform Team
    - **Escalation**: Engineering Manager

    ## Additional Resources

    - [Backup Architecture Documentation](./backup-architecture.md)
    - [Disaster Recovery Plan](./disaster-recovery.md)
    - [Monitoring Dashboard](http://grafana.example.com/d/backup-monitoring)
    - [Alert Manager](http://alertmanager.example.com)
